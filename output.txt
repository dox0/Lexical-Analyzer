argc = 3
tag = number
reg = [0-9]
tag = char
reg = [A-Z]|[a-z]
tag = numseq
reg = [number]([number])*
tag = value
reg = [numseq](?|.[numseq]|E(+|-)[numseq])
tag = keyword
reg = int|void|float|#include|if|else|return|auto|while|do
tag = id
reg = ([char]|_)([char]|[number]|_)*
tag = operator
reg = \(|,|\)|<|>|[|]|;|%|^|{|}|+|-|\*|/|=|::|:|.|\\\\|!|\||\|\||&|&&
tag = literal
reg = "([char]|[number]|[operator]| |\\\\[char])*"|'([char]|[number]|[operator]|#)'|'\\\\[char]'
tag = temp
reg = [numseq].|[numseq]E|[numseq]E(+|-)|"([char]|[number]|[operator]| )*
-------- preprosessor display ----------
size = 9
tag = number
reg = 0\|1\|2\|3\|4\|5\|6\|7\|8\|9
tag = char
reg = A\|B\|C\|D\|E\|F\|G\|H\|I\|J\|K\|L\|M\|N\|O\|P\|Q\|R\|S\|T\|U\|V\|W\|X\|Y\|Z\|a\|b\|c\|d\|e\|f\|g\|h\|i\|j\|k\|l\|m\|n\|o\|p\|q\|r\|s\|t\|u\|v\|w\|x\|y\|z
tag = numseq
reg = \[number\]\(\[number\]\)\*
tag = value
reg = \[numseq\]\(\?\|.\[numseq\]\|E\(+\|-\)\[numseq\]\)
tag = keyword
reg = int\|void\|float\|#include\|if\|else\|return\|auto\|while\|do
tag = id
reg = \(\[char\]\|_\)\(\[char\]\|\[number\]\|_\)\*
tag = operator
reg = (\|,\|)\|<\|>\|[\|]\|;\|%\|^\|{\|}\|+\|-\|*\|/\|=\|::\|:\|.\|\\\|!\||\|||\|&\|&&
tag = literal
reg = "\(\[char\]\|\[number\]\|\[operator\]\| \|\\\[char\]\)\*"\|'\(\[char\]\|\[number\]\|\[operator\]\|#\)'\|'\\\[char\]'
tag = temp
reg = \[numseq\].\|\[numseq\]E\|\[numseq\]E\(+\|-\)\|"\(\[char\]\|\[number\]\|\[operator\]\| \)\*
----- to dfa -----
value keyword id operator literal temp 
-------- end display -------------------
315 micro seconds
value
43776 micro seconds
keyword
2397 micro seconds
id
2424751 micro seconds
operator
5060 micro seconds
literal
5986013 micro seconds
temp
3654350 micro seconds
12250555 micro seconds
===============================
=> start parse.
read cnt = 1024
buf[0] = #
Current content: 
#include "LexicalAnalyzer.hpp"
#include "Preprocessor.hpp"
#include <cstdio>
#include <fstream>
#include <chrono>
using namespace std;

void preprocess(const char *filePath, Preprocessor &ppr) {

    auto begin = std::chrono::high_resolution_clock::now();
    ifstream input(filePath);
    char str[N] = {};

    while (!input.eof()) {
        input.getline(str, N, '\n');
        if (str[0] && str[0] != '#') {
            std::string reg(str, strlen(str));

            if (*reg.rbegin() == 13) {
                reg.pop_back();
            }

            // printf("rrrr = %c\n", *reg.rbegin());
            ppr.update(reg);
        }
    }

    input.close();

    ppr.display();
    auto end = std::chrono::high_resolution_clock::now();
    // std::cout << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << " micro seconds" << std::endl;
    printf("%lld micro seconds\n", std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count());
    // fflush(stdout);
    fflush(stdout)
line 1   : (    keyword : #include )
line 1   : (    literal : "LexicalAnalyzer.hpp" )
line 2   : (    keyword : #include )
line 2   : (    literal : "Preprocessor.hpp" )
line 3   : (    keyword : #include )
line 3   : (   operator : < )
line 3   : (         id : cstdio )
line 3   : (   operator : > )
line 4   : (    keyword : #include )
line 4   : (   operator : < )
line 4   : (         id : fstream )
line 4   : (   operator : > )
line 5   : (    keyword : #include )
line 5   : (   operator : < )
line 5   : (         id : chrono )
line 5   : (   operator : > )
line 6   : (         id : using )
line 6   : (         id : namespace )
line 6   : (         id : std )
line 6   : (   operator : ; )
line 8   : (    keyword : void )
line 8   : (         id : preprocess )
line 8   : (   operator : ( )
line 8   : (         id : const )
line 8   : (         id : char )
line 8   : (   operator : * )
line 8   : (         id : filePath )
line 8   : (   operator : , )
line 8   : (         id : Preprocessor )
line 8   : (   operator : & )
line 8   : (         id : ppr )
line 8   : (   operator : ) )
line 8   : (   operator : { )
line 10  : (    keyword : auto )
line 10  : (         id : begin )
line 10  : (   operator : = )
line 10  : (         id : std )
line 10  : (   operator : :: )
line 10  : (         id : chrono )
line 10  : (   operator : :: )
line 10  : (         id : high_resolution_clock )
line 10  : (   operator : :: )
line 10  : (         id : now )
line 10  : (   operator : ( )
line 10  : (   operator : ) )
line 10  : (   operator : ; )
line 11  : (         id : ifstream )
line 11  : (         id : input )
line 11  : (   operator : ( )
line 11  : (         id : filePath )
line 11  : (   operator : ) )
line 11  : (   operator : ; )
line 12  : (         id : char )
line 12  : (         id : str )
line 12  : (   operator : [ )
line 12  : (         id : N )
line 12  : (   operator : ] )
line 12  : (   operator : = )
line 12  : (   operator : { )
line 12  : (   operator : } )
line 12  : (   operator : ; )
line 14  : (    keyword : while )
line 14  : (   operator : ( )
line 14  : (   operator : ! )
line 14  : (         id : input )
line 14  : (   operator : . )
line 14  : (         id : eof )
line 14  : (   operator : ( )
line 14  : (   operator : ) )
line 14  : (   operator : ) )
line 14  : (   operator : { )
line 15  : (         id : input )
line 15  : (   operator : . )
line 15  : (         id : getline )
line 15  : (   operator : ( )
line 15  : (         id : str )
line 15  : (   operator : , )
line 15  : (         id : N )
line 15  : (   operator : , )
line 15  : (    literal : '\n' )
line 15  : (   operator : ) )
line 15  : (   operator : ; )
line 16  : (    keyword : if )
line 16  : (   operator : ( )
line 16  : (         id : str )
line 16  : (   operator : [ )
line 16  : (      value : 0 )
line 16  : (   operator : ] )
line 16  : (   operator : && )
line 16  : (         id : str )
line 16  : (   operator : [ )
line 16  : (      value : 0 )
line 16  : (   operator : ] )
line 16  : (   operator : ! )
line 16  : (   operator : = )
line 16  : (    literal : '#' )
line 16  : (   operator : ) )
line 16  : (   operator : { )
line 17  : (         id : std )
line 17  : (   operator : :: )
line 17  : (         id : string )
line 17  : (         id : reg )
line 17  : (   operator : ( )
line 17  : (         id : str )
line 17  : (   operator : , )
line 17  : (         id : strlen )
line 17  : (   operator : ( )
line 17  : (         id : str )
line 17  : (   operator : ) )
line 17  : (   operator : ) )
line 17  : (   operator : ; )
line 19  : (    keyword : if )
line 19  : (   operator : ( )
line 19  : (   operator : * )
line 19  : (         id : reg )
line 19  : (   operator : . )
line 19  : (         id : rbegin )
line 19  : (   operator : ( )
line 19  : (   operator : ) )
line 19  : (   operator : = )
line 19  : (   operator : = )
line 19  : (      value : 13 )
line 19  : (   operator : ) )
line 19  : (   operator : { )
line 20  : (         id : reg )
line 20  : (   operator : . )
line 20  : (         id : pop_back )
line 20  : (   operator : ( )
line 20  : (   operator : ) )
line 20  : (   operator : ; )
line 21  : (   operator : } )
line 24  : (    comment : // printf("rrrr = %c\n", *reg.rbegin()); )
line 24  : (         id : ppr )
line 24  : (   operator : . )
line 24  : (         id : update )
line 24  : (   operator : ( )
line 24  : (         id : reg )
line 24  : (   operator : ) )
line 24  : (   operator : ; )
line 25  : (   operator : } )
line 26  : (   operator : } )
line 28  : (         id : input )
line 28  : (   operator : . )
line 28  : (         id : close )
line 28  : (   operator : ( )
line 28  : (   operator : ) )
line 28  : (   operator : ; )
line 30  : (         id : ppr )
line 30  : (   operator : . )
line 30  : (         id : display )
line 30  : (   operator : ( )
line 30  : (   operator : ) )
line 30  : (   operator : ; )
line 31  : (    keyword : auto )
line 31  : (         id : end )
line 31  : (   operator : = )
line 31  : (         id : std )
line 31  : (   operator : :: )
line 31  : (         id : chrono )
line 31  : (   operator : :: )
line 31  : (         id : high_resolution_clock )
line 31  : (   operator : :: )
line 31  : (         id : now )
line 31  : (   operator : ( )
line 31  : (   operator : ) )
line 31  : (   operator : ; )
line 33  : (    comment : // std::cout << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << " micro seconds" << std::endl; )
line 33  : (         id : printf )
line 33  : (   operator : ( )
line 33  : (    literal : "%lld micro seconds\n" )
line 33  : (   operator : , )
line 33  : (         id : std )
line 33  : (   operator : :: )
line 33  : (         id : chrono )
line 33  : (   operator : :: )
line 33  : (         id : duration_cast )
line 33  : (   operator : < )
line 33  : (         id : std )
line 33  : (   operator : :: )
line 33  : (         id : chrono )
line 33  : (   operator : :: )
line 33  : (         id : microseconds )
line 33  : (   operator : > )
line 33  : (   operator : ( )
line 33  : (         id : end )
line 33  : (   operator : - )
line 33  : (         id : begin )
line 33  : (   operator : ) )
line 33  : (   operator : . )
line 33  : (         id : count )
line 33  : (   operator : ( )
line 33  : (   operator : ) )
line 33  : (   operator : ) )
line 33  : (   operator : ; )
line 35  : (    comment : // fflush(stdout); )
line 35  : (         id : fflush )
line 35  : (   operator : ( )
line 35  : (         id : stdout )
read cnt = 972
buf[0] = )
Current content: 
);
}

void test(Preprocessor &ppr, LexicalAnalyzer &la) {
    preprocess("input.txt", ppr);
    ppr.buildLA(la);
    la.parse("main.cpp");
}

int main(int argc, char *argv[]) {
    freopen("output.txt", "w", stdout);
    Preprocessor ppr;
    LexicalAnalyzer la;

    printf("argc = %d\n", argc);

    if (argc > 1) {
        preprocess(argv[1], ppr);
        auto begin = std::chrono::high_resolution_clock::now();
        ppr.buildLA(la);
        auto end = std::chrono::high_resolution_clock::now();
        printf("%lld micro seconds\n", std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count());
    } else {
        test(ppr, la);
    }

    if (argc > 2) {
        auto begin = std::chrono::high_resolution_clock::now();
        la.parse(argv[2]);
        auto end = std::chrono::high_resolution_clock::now();
        printf("%lld micro seconds\n", std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count());
    }

    return 0;
}
line 35  : (   operator : ) )
line 35  : (   operator : ; )
line 36  : (   operator : } )
line 38  : (    keyword : void )
line 38  : (         id : test )
line 38  : (   operator : ( )
line 38  : (         id : Preprocessor )
line 38  : (   operator : & )
line 38  : (         id : ppr )
line 38  : (   operator : , )
line 38  : (         id : LexicalAnalyzer )
line 38  : (   operator : & )
line 38  : (         id : la )
line 38  : (   operator : ) )
line 38  : (   operator : { )
line 39  : (         id : preprocess )
line 39  : (   operator : ( )
line 39  : (    literal : "input.txt" )
line 39  : (   operator : , )
line 39  : (         id : ppr )
line 39  : (   operator : ) )
line 39  : (   operator : ; )
line 40  : (         id : ppr )
line 40  : (   operator : . )
line 40  : (         id : buildLA )
line 40  : (   operator : ( )
line 40  : (         id : la )
line 40  : (   operator : ) )
line 40  : (   operator : ; )
line 41  : (         id : la )
line 41  : (   operator : . )
line 41  : (         id : parse )
line 41  : (   operator : ( )
line 41  : (    literal : "main.cpp" )
line 41  : (   operator : ) )
line 41  : (   operator : ; )
line 42  : (   operator : } )
line 44  : (    keyword : int )
line 44  : (         id : main )
line 44  : (   operator : ( )
line 44  : (    keyword : int )
line 44  : (         id : argc )
line 44  : (   operator : , )
line 44  : (         id : char )
line 44  : (   operator : * )
line 44  : (         id : argv )
line 44  : (   operator : [ )
line 44  : (   operator : ] )
line 44  : (   operator : ) )
line 44  : (   operator : { )
line 45  : (         id : freopen )
line 45  : (   operator : ( )
line 45  : (    literal : "output.txt" )
line 45  : (   operator : , )
line 45  : (    literal : "w" )
line 45  : (   operator : , )
line 45  : (         id : stdout )
line 45  : (   operator : ) )
line 45  : (   operator : ; )
line 46  : (         id : Preprocessor )
line 46  : (         id : ppr )
line 46  : (   operator : ; )
line 47  : (         id : LexicalAnalyzer )
line 47  : (         id : la )
line 47  : (   operator : ; )
line 49  : (         id : printf )
line 49  : (   operator : ( )
line 49  : (    literal : "argc = %d\n" )
line 49  : (   operator : , )
line 49  : (         id : argc )
line 49  : (   operator : ) )
line 49  : (   operator : ; )
line 51  : (    keyword : if )
line 51  : (   operator : ( )
line 51  : (         id : argc )
line 51  : (   operator : > )
line 51  : (      value : 1 )
line 51  : (   operator : ) )
line 51  : (   operator : { )
line 52  : (         id : preprocess )
line 52  : (   operator : ( )
line 52  : (         id : argv )
line 52  : (   operator : [ )
line 52  : (      value : 1 )
line 52  : (   operator : ] )
line 52  : (   operator : , )
line 52  : (         id : ppr )
line 52  : (   operator : ) )
line 52  : (   operator : ; )
line 53  : (    keyword : auto )
line 53  : (         id : begin )
line 53  : (   operator : = )
line 53  : (         id : std )
line 53  : (   operator : :: )
line 53  : (         id : chrono )
line 53  : (   operator : :: )
line 53  : (         id : high_resolution_clock )
line 53  : (   operator : :: )
line 53  : (         id : now )
line 53  : (   operator : ( )
line 53  : (   operator : ) )
line 53  : (   operator : ; )
line 54  : (         id : ppr )
line 54  : (   operator : . )
line 54  : (         id : buildLA )
line 54  : (   operator : ( )
line 54  : (         id : la )
line 54  : (   operator : ) )
line 54  : (   operator : ; )
line 55  : (    keyword : auto )
line 55  : (         id : end )
line 55  : (   operator : = )
line 55  : (         id : std )
line 55  : (   operator : :: )
line 55  : (         id : chrono )
line 55  : (   operator : :: )
line 55  : (         id : high_resolution_clock )
line 55  : (   operator : :: )
line 55  : (         id : now )
line 55  : (   operator : ( )
line 55  : (   operator : ) )
line 55  : (   operator : ; )
line 56  : (         id : printf )
line 56  : (   operator : ( )
line 56  : (    literal : "%lld micro seconds\n" )
line 56  : (   operator : , )
line 56  : (         id : std )
line 56  : (   operator : :: )
line 56  : (         id : chrono )
line 56  : (   operator : :: )
line 56  : (         id : duration_cast )
line 56  : (   operator : < )
line 56  : (         id : std )
line 56  : (   operator : :: )
line 56  : (         id : chrono )
line 56  : (   operator : :: )
line 56  : (         id : microseconds )
line 56  : (   operator : > )
line 56  : (   operator : ( )
line 56  : (         id : end )
line 56  : (   operator : - )
line 56  : (         id : begin )
line 56  : (   operator : ) )
line 56  : (   operator : . )
line 56  : (         id : count )
line 56  : (   operator : ( )
line 56  : (   operator : ) )
line 56  : (   operator : ) )
line 56  : (   operator : ; )
line 57  : (   operator : } )
line 57  : (    keyword : else )
line 57  : (   operator : { )
line 58  : (         id : test )
line 58  : (   operator : ( )
line 58  : (         id : ppr )
line 58  : (   operator : , )
line 58  : (         id : la )
line 58  : (   operator : ) )
line 58  : (   operator : ; )
line 59  : (   operator : } )
line 61  : (    keyword : if )
line 61  : (   operator : ( )
line 61  : (         id : argc )
line 61  : (   operator : > )
line 61  : (      value : 2 )
line 61  : (   operator : ) )
line 61  : (   operator : { )
line 62  : (    keyword : auto )
line 62  : (         id : begin )
line 62  : (   operator : = )
line 62  : (         id : std )
line 62  : (   operator : :: )
line 62  : (         id : chrono )
line 62  : (   operator : :: )
line 62  : (         id : high_resolution_clock )
line 62  : (   operator : :: )
line 62  : (         id : now )
line 62  : (   operator : ( )
line 62  : (   operator : ) )
line 62  : (   operator : ; )
line 63  : (         id : la )
line 63  : (   operator : . )
line 63  : (         id : parse )
line 63  : (   operator : ( )
line 63  : (         id : argv )
line 63  : (   operator : [ )
line 63  : (      value : 2 )
line 63  : (   operator : ] )
line 63  : (   operator : ) )
line 63  : (   operator : ; )
line 64  : (    keyword : auto )
line 64  : (         id : end )
line 64  : (   operator : = )
line 64  : (         id : std )
line 64  : (   operator : :: )
line 64  : (         id : chrono )
line 64  : (   operator : :: )
line 64  : (         id : high_resolution_clock )
line 64  : (   operator : :: )
line 64  : (         id : now )
line 64  : (   operator : ( )
line 64  : (   operator : ) )
line 64  : (   operator : ; )
line 65  : (         id : printf )
line 65  : (   operator : ( )
line 65  : (    literal : "%lld micro seconds\n" )
line 65  : (   operator : , )
line 65  : (         id : std )
line 65  : (   operator : :: )
line 65  : (         id : chrono )
line 65  : (   operator : :: )
line 65  : (         id : duration_cast )
line 65  : (   operator : < )
line 65  : (         id : std )
line 65  : (   operator : :: )
line 65  : (         id : chrono )
line 65  : (   operator : :: )
line 65  : (         id : microseconds )
line 65  : (   operator : > )
line 65  : (   operator : ( )
line 65  : (         id : end )
line 65  : (   operator : - )
line 65  : (         id : begin )
line 65  : (   operator : ) )
line 65  : (   operator : . )
line 65  : (         id : count )
line 65  : (   operator : ( )
line 65  : (   operator : ) )
line 65  : (   operator : ) )
line 65  : (   operator : ; )
line 66  : (   operator : } )
line 68  : (    keyword : return )
line 68  : (      value : 0 )
line 68  : (   operator : ; )
line 69  : (   operator : } )
-------------------------------
Parse success!
===============================
3308 micro seconds
