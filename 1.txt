==20036== Memcheck, a memory error detector
==20036== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==20036== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==20036== Command: ./main input.txt code.txt
==20036== 
==20036== 
==20036== HEAP SUMMARY:
==20036==     in use at exit: 152,195 bytes in 990 blocks
==20036==   total heap usage: 11,346,059 allocs, 11,345,069 frees, 229,443,739 bytes allocated
==20036== 
==20036== 13,549 (36 direct, 13,513 indirect) bytes in 3 blocks are definitely lost in loss record 10 of 13
==20036==    at 0x402A6DC: operator new(unsigned int) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==20036==    by 0x8060B0B: __gnu_cxx::new_allocator<std::_List_node<int**> >::allocate(unsigned int, void const*) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x805EA4D: std::_List_base<int**, std::allocator<int**> >::_M_get_node() (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x805AC38: std::_List_node<int**>* std::list<int**, std::allocator<int**> >::_M_create_node<int** const&>(int** const&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x8055DA1: void std::list<int**, std::allocator<int**> >::_M_insert<int** const&>(std::_List_iterator<int**>, int** const&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x8052292: std::list<int**, std::allocator<int**> >::push_back(int** const&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x804A61A: buildDFA(NFATable&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x804F64F: Preprocessor::buildLA(LexicalAnalyzer&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x804B04F: main (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036== 
==20036== 119,350 (36 direct, 119,314 indirect) bytes in 3 blocks are definitely lost in loss record 13 of 13
==20036==    at 0x402A6DC: operator new(unsigned int) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==20036==    by 0x8060B0B: __gnu_cxx::new_allocator<std::_List_node<int**> >::allocate(unsigned int, void const*) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x805EA4D: std::_List_base<int**, std::allocator<int**> >::_M_get_node() (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x805AC38: std::_List_node<int**>* std::list<int**, std::allocator<int**> >::_M_create_node<int** const&>(int** const&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x8055DA1: void std::list<int**, std::allocator<int**> >::_M_insert<int** const&>(std::_List_iterator<int**>, int** const&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x8052292: std::list<int**, std::allocator<int**> >::push_back(int** const&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x804A861: buildDFA(NFATable&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x804F64F: Preprocessor::buildLA(LexicalAnalyzer&) (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036==    by 0x804B04F: main (in /home/piratf/Documents/code/LexicalAnalyzer/main)
==20036== 
==20036== LEAK SUMMARY:
==20036==    definitely lost: 72 bytes in 6 blocks
==20036==    indirectly lost: 132,827 bytes in 982 blocks
==20036==      possibly lost: 0 bytes in 0 blocks
==20036==    still reachable: 19,296 bytes in 2 blocks
==20036==         suppressed: 0 bytes in 0 blocks
==20036== Reachable blocks (those to which a pointer was found) are not shown.
==20036== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==20036== 
==20036== For counts of detected and suppressed errors, rerun with: -v
==20036== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
